        Exercise 2a
        ==========

October 27,1999
---------------

Fixed to add machines line to specify the IP addresses for the machines.
---------------

Construct a semi-reliable tree-based multicast tool using UDP/IP.
The semi-reliable multicast will assume no network partitions or processor
crashes, but it WILL handle all kinds of message omissions over a 
wide-area network described by a basic graph.

1. The assignment:

Using the non-reliable UDP/IP protocol, you should write a tool that 
reliably multicast packets between n machines that are nodes on a graph
representing their location in a wide-area network. Each machine will be in 
direct contact with between 1 and n of the other machines by point-to-point
connections. A message sent by any one of the machines should reach every 
other machine reliably, by being forwarded by every machine in the graph.

The tool consists of two programs: 
	wancast - the tool's process. 
	start - a process signaling the wancast processes to start.

The wancast process should be run as follows:

wancast <num_of_packets> <machine_index> <configuration file>

Input:
------

The maximal number of num_of_machines should be a constant and should be set
to 6. The configuration file will be a file holding a list of edges in the 
graph which represents the network connecting the machines. The 
num_of_machines indicates how many wancast machines will 
be run. This matrix will be specified as follows:

Graph <num of machines>
(1,2)
(1,3)
(3,4)
Machines
1 128.220.13.30
2 128.220.13.87
3 128.220.223.100
4 128.220.223.50

Where each pair in parenthesis are an edge in the graph connecting machines, 
and all edges not specified are not present. So the above list should 
create the following network with 4 machines:

M1 <-> M3 <-> M4
^
|
M2

Thus is M2 is multicasting a message, M2 will first send it directly 
to M1, then M1 will send it to M3 and then M3 will send it to M4. If M1 
is multicasting a message, M1 will first send it to both M2 and M3 
directly, and then M3 will send it onto M4.

In general the list of edges can create any arbitrary valid network connecting N nodes.
The main constraints are that all the nodes WILL BE CONNECTED, i.e. every machine
will have at least one connection to another machine, and that the resulting
graph WILL BE A TREE (i.e. an undirected acyclic graph).

When parsing the configuration file you should ignore any blank lines 
(all spaces,tabs,etc) and ignore any line that starts with 
the '#' character.  

The num_of_packets indicates how many packets THIS wancast has to initiate.
This number might be in the order of 10,000 packets and even more.
Each packet should contain the creating machine_index, a packet_index, and
a random number, each of them is stored in a 4 bytes integer.
The random number is an integer, picked at the time of the creation of the 
packet, randomly selected from the range 1-1000.
Therefore each packet should contain 12 bytes + additional bytes in case 
your protocol needs them.

After all the wancast processes have been started, the start process is 
executed, signaling the wancast processes to start the protocol by 
sending a special broadcast message.

At the beginning of the wancast program it should wait for the start packet
to arrive. This will be done by calling recv directly. Only after that 
packet arrives, should the reliable protocol be invoked. 
The start process helps us avoid membership problems.


Required Task:
--------------
The requirement for the wancast is:

You should deliver all packets reliably according to FIFO order.

To accomplish this you will have to design and implement some 
point-to-point reliability protocol like the one from the first assignment, 
build a routing table based on the input graph so packets are forwarded to 
machines lower down in the tree, and guarantee a FIFO ordering of the 
messages before delivering them.

For those who take 600.337: you can assume that only one wancast will get 
positive <num_of_packets> and the rest will get 0 as the num_of_packets.

For those who take 600.437: Any wancast may get a non-negative 
num_of_packet.

Output:
-------

On delivery of a packet the wancast should write to a file, in ASCII format,
the packet data as follows:
	fprintf( fd, "%5d, %6d, %5d\n", packet->machine, packet->index, packet->random_data );

The output file name will be <machine_index>.out


Evaluation and Testing:
-----------------------
In order to be able to check the software, the wancast program
should call a coat routine named sendto_dbg instead of the sendto system 
call. The coat routine has the same interface as sendto (see man 2 sendto). 
The sendto_dbg routine will randomly decide to discard packets in order to 
create additional network message omissions.
The source of the sendto_dbg routine is available in the course home 
directory.

EVERY SEND CALL in the wancast program MUST use the sendto_dbg call. The 
Start program however, should use the normal 'sendto' call with no 
additional loss. 

To test your design you should run a test where a total of 12000 packets 
are sent and time how long the test takes. For 337 students, one node 
should be the sender of all 12000 packets. For 437 students, a test 
with 6 nodes should be run and each node should send 2000 packets.

Everyone should run these tests 5 times, each time with a different 
loss rate (0% 1% 5% 10% 30%) and graph the results with the 
X-axis being the loss rate and the Y-axis being the time the packet 
transmission took. 

Thus, you should turn in results comparing five experiments:
1. wancast  (zero loss rate)
2. wancast with %1 loss rate
3. wancast with %5 loss rate
4. wancast with %10 loss rate
5. wancast with %30 loss rate

Please have a table with all 5 results and a graph as described above.

2. Submission:

You should work on this exercise in pairs.
Put the sources and executables of the wancast and start programs, and the 
supplementary documentation in your home directory, under 

        ~/cs437/ex2

The programs should be compete, sound, and well documented. An external 
design documentation describing the algorithms and high level design 
should be included.

In addition, please submit a printed version of your submission (sources,
documentations, and results).

Failure to comply with submission instructions may result in a lower grade.
Issues such as correctness, design, documentation, and, most importantly, 
efficiency will be considered.

The date for submitting a written design is Wednesday, October 27 in class.
Submission date for the complete exercise and updated design is Monday 
November 8 in class.



