                            Distributed Systems
                            ===================
                               Final  Project
                               ==============


DESCRIPTION
-----------

Construct a reliable and efficient mail service for users over a 
network of computers.

The service:

Every user can connect via a mail client to any one of replicated servers. 

The mail service provides the following capabilities:

1. Login as a user.

   The client needs to login with a user name to perform any of the tasks below.
   You should allow the client to login as a new user as part of the menu
   by specifying the user name.

2. Connecting to a server.

   The client needs to connect to a server to perform any of the tasks below.

   You should allow the client to change its server as
   part of the menu, by specifying the server index. 

   * At any point, the client may be connected to one server only.
   * To connect to a server, all a client needs to do is to set this
     server as its serving server. Client/Server communication should
     be done using Spread via the private group of each.

   In the Java Applet version, you can still do that even in the presence of the
   sandbox because you are connecting through Spread, and so you can direct 
   messages to the different private groups.
   Running the applet when your browser/appletviewer is run on a computer,
   will allow you to connect to the Spread daemon running on this machine.

3. View list of headers of received mail (The service should distinguish 
   between mail that was already read and unread mail):

   Result: 
	The view should include the user name, the responding server index and 
	a list of messages. The messages in the list will be numbered 
	(1, 2, 3, ...) and the sender and subject of each message will be 
	displayed.

	* Each request for a view should result in the most updated information 
	  possible.

4. Mail a message to a user:
   	to:  <user name>
        subject:  <subject string>
        <msg string>           

          * 'to' and 'subject' are fields that should be added
            as part of the header, as in the Unix mail service.
            Note that the size of the msg string can be bounded 1000 bytes.

	    Using Java, this can be a form to fill (also using X if you like).


5. Delete a mail message (read or unread):

   Will allow to delete a message either by its number or by pointing on it.

6. Read a received mail (read or unread):

   Will allow to read the content of a message either by its number or by 
   pointing on it.  The message should be marked as read thereafter.

7. Print the view of the servers in the current server's network component.


The Servers:

The mail client connects to one of the server processes. Each of the
server processes is a background daemon.  
The server may crash and may subsequently recover.
Connections may also fail, creating network partitions and re-merges.
The overall set of servers is fixed and is known in advance - there are 
exactly five servers, each running on an insux machine.
The server is started with its id as a parameter:
	% server [1-5]

The users must always receive a consistent view of their mail, 
regardless of which server is consulted (of course, as consistent  
as possible, according to the network connectivity).
The view should be consistent as to which messages have been received, 
read or deleted.  Each server may save information separately on disk.

The membership simulation:

The simulation will be managed by a 'simulator' interactive process or applet.
The simulator can redefine the membership configuration at any time by
defining for each server which network component it belongs to, or defining the
server as crashed.  For a set of 5 servers, we may give the following
configuration: 
	A B A crash A    
meaning servers 1, 3 and 5 belong to network component A, server 2 belongs to 
component B and server 4 has crashed.

Each simulated membership event contains the configuration and a unique
configuration identifier.  The simulator MULTICASTS these membership messages 
to the servers USING SPREAD, telling them to which network component they 
belong, or that they have crashed. Each membership event is exactly one Spread 
message. A crashed server exits the program immediately! It is not legal to 
write to disk after a server receives a simulator's membership message 
indicating it has crashed!

To activate a dead server, it will be re-run from the shell.  
Note that a recovering server cannot join the protocol and begin working 
until it has received the first configuration message from the simulator 
(this is also correct for the first time a server ever comes up).

The membership simulation should be complete by having all of the servers
communicate among themselves using certain process groups. After receiving
a membership change from the simulator, servers should ignore messages
that were sent by servers that are not part of their current component.

Note:

The users are not known beforehand, and their number is not bounded.

CS 600.337 students can assume that no server crashes ever. They only need
to handle network partitions. Therefore, they do not need to write to
or read from disk. This also simplifies the rest of the project.

Summary
-------

These are 3 programs:

The simulator (Applet in Java)
The client (Applet in Java). 
The server (daemon / application in Java). 

REQUIREMENTS
------------

- Efficient use of messages.

- The content of messages will not be sent unnecessarily, though information 
  about the message, such as an id, may be sent.

- Fully distributed management is required.

- An organized Makefile is required.

- A detailed description of the algorithm and the system design should be
  provided.


Delivery Date
-------------

Delivery date is officially Monday December 13 at noon. 
Penalty for submission after that time is 1/100.
We cannot guarantee a grade before December 17 for late submissions.
Students have to either submit at December 13 at noon, or fill an
incomplete form no later than that date, to allow late submissions.
Last day for late submission is Wednesday January 19, midnight. 

Note that undergraduate students that have an incomplete grade might see 
it as an  F in their transcript until it is fixed. There is nothing we can do
about that. 


