                            Distributed Systems Final Project
                            =================================

The goal of the final project is to produce a distributed software system that 
demonstrates what you have learned in this class and provides a useful service.
The focus of your project should be on the distributed aspects and correctness 
of the system and not the graphical, GUI, or other peripheral issues.

General Requirements
--------------------
- Efficient use of messages - Don't send messages unnecessarily.

- A detailed description of the algorithm and the system design should be
  provided. The initial design should be in the first design document.
  The final report should include an enhanced and updated design document.

- System that produces correct results for all inputs.

- An organized Makefile is required.

Delivery Date
-------------
Initial design document is due Tuesday November 11 in class. 
Final delivery date is Friday December 5, 10pm, 2014.

=====================================================================
Project description: Fault-tolerant distributed chat room application
=====================================================================
Construct a reliable and efficient chat room service for users over 
a network of computers. The service will comprise a chat server and
a chat client programs.

The service:
------------
Every user can connect via a chat client to any one of the replicated servers. 

The chat service provides the following capabilities; each capability
is one option of a client's top level menu:

1. Login with a user name. "u Jeff". The user can change its identity at
   any time with that option (this client will be removed from the chat room the
   old user was in, if any). Note that the same user can be logged in
   on multiple chat servers, or even the same chat server (and should see a 
   consistent view as much as possible), through multiple clients.

2. Connecting to a specific chat server. For example, "c 3" will connect to 
   server 3. The client needs to connect to a chat server to perform any of the 
   operations below.

   You should allow the client to change its chat server as part of the menu, 
   by specifying the new server's index. 

   * At any point, the client may be connected to one chat server only.
   * To connect to a chat server, all a client needs to do is to set this server 
     as its serving server. Client/Server communication should be done using 
     Spread via the client's private group and a public group with only that 
     chat server in it (used by clients to send messages to that chat server).


3. Join a chat. "j room1"

   If the specified chat room does not exist, it is created.

   Upon joining a chat, the chat room should be presented, such that all the 
   current room participants are listed, and the most recent 25 messages in this 
   room (lines) are presented, oldest to newest. The number of unique 'likes' for
   each line (see below) should be presented to the right of the line.


   Example:

   Room: Room1
   Attendees: Jeff, Amy, Yair.
   1. Yair: Hello. 
   2. Yair: How are you today?                                Likes: 5
   3. Jeff: Not sure yet.
 
   After joining a chat, upon any update to the chat, the screen should 
   automatically include the new message or refresh to include or remove attendees 
   (as needed, but only upon a relevant update).

   A connected client can switch to a different chat room at any time by joining
   the new chat room. Joining a new chat removes the client from its previous room.
   The client needs to be in a chat to perform any of the operations below.

3. Append to a chat. "a" and then type a line.
 
   The relevant chat should be updated so that the new line is added
   at the end of the chat.  You can assume that the maximum number
   of characters in a line is 80.

4. Mark line as 'liked'. "l 5". (Note, this is a lowercase L, not the number one)

   The relevant line on the screen will be marked as liked by this user, but only 
   if the user is not the creator of the line. Each user can only be counted once 
   for each line.

   Note that as a consequence of this update, the screen may need to be refreshed.
   Line numbers are only pertinent to the current display.

5. Remove your 'like' from a line (if you 'liked' it). "r 5".

   Your 'like' will be removed from that line if it is currently liked by the user.
   Note that all inconsistencies due to partitions need to be resolved consistently
   and logically.

6. Print once all the history of the current chat room (from the first oldest line
   to the newest line, including their 'like' ). "h".

7. Print the view (the identities) of chat servers in the current server's network 
   component. "v".








The Chat Room Servers:

Chat room clients connect to one of the chat server processes. 

Each of the server processes is a background daemon. The server may crash and may 
subsequently recover. The network between the servers may partition and re-merge.
The overall set of servers is fixed and is known in advance - there are exactly 
five servers, each running on a different ugrad machine.
The server is started with its id as a parameter:
	% chat_server [1-5]

The clients must always receive a consistent view of the chat room they
are joined to, regardless of which chat server is consulted (of course, 
as consistent  as possible, according to the network connectivity).
The view should be consistent as to which lines are displayed. If lines
are appended by different clients, possibly in different network partitions,
they should all appear once the partition is healed, as much as possible
based on network connectivity. Causality should always be preserved (e.g. questions
should appear before their answers).

Each server should save information separately on disk.
Note that servers can be eventually consistent even if they are never
directly connected (think about eventual path).


The membership emulation:
--------------------------
The membership emulation will be managed by spmonitor, an interactive program 
provided with the Spread toolkit. spmonitor can redefine the membership 
configuration at any time by defining for each Spread daemon which network i
component it belongs to, or defining some daemons as crashed. Note that spmonitor 
will generate Spread daemon partitions and crashes, but your program should also 
handle crashes (Ctrl+C) of the Spread daemons, chat servers, and chat clients.  

When a Spread daemon crashes, the chat server attached to it has to crash (exit) 
also. A crashed chat server exits the program immediately! It is not allowed to 
write to disk after a chat server loses its connection to Spread!

When a chat server crashes, clients connected to that server will report 
the loss of connection to the user, so that the user can connect to another 
chat server and continue operation.

Note: The chat rooms and the users are not known beforehand, and their number is 
not bounded.

CS 600.337 students can assume that no chat server or Spread daemons crashes ever. 
They only need to handle network partitions. Therefore, they do not need to 
write to or read from disk. This also simplifies the rest of the project.

