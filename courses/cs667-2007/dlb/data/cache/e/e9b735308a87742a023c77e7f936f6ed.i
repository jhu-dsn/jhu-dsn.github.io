a:242:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1;}i:3;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:-1;i:1;i:0;i:2;i:1;i:3;s:0:"";}i:2;i:1;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Introduction";i:1;i:1;i:2;i:1;}i:2;i:1;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:28;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"With the advent of social networking sites such as ";}i:2;i:29;}i:9;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:16:"http://digg.com/";i:1;s:4:"digg";}i:2;i:80;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:", small websites accustomed to very little traffic can experience ";}i:2;i:105;}i:11;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:44:"http://en.wikipedia.org/wiki/Slashdot_effect";i:1;s:23:"sudden booms in traffic";}i:2;i:171;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:656:", often crippling the server hosting the site.  This project aims to solve this problem, which is not restrained to the likes of digg, from the standpoint of a web hosting service provider by creating a means to actively and dynamically distribute the resources of a server cluster to the sites that need it most.  The techniques used to achieve this goal also allow for optimal distribution of sites across the servers in the cluster, thus allowing the hosting service to get the most out of the hardware resources available to them.  In addition, this project addresses the need for a load balancer module for Apache 2 which distributes requests using a ";}i:2;i:243;}i:13;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:899;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"smart";}i:2;i:900;}i:15;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:905;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" algorithm based off of server load, not the ";}i:2;i:906;}i:17;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:951;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"dumb";}i:2;i:952;}i:19;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:956;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" round-robin style algorithms currently available.";}i:2;i:957;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1007;}i:22;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1009;}i:23;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:1;i:1;i:1008;i:2;i:1;i:3;s:12:"Introduction";}i:2;i:1009;}i:24;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Project Goals and Description";i:1;i:1;i:2;i:1009;}i:2;i:1009;}i:25;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1009;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1052;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1053;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Two main goals exist for this project: ";}i:2;i:1054;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1093;}i:30;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:1093;}i:31;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1093;}i:32;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1093;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" Implement a load balancer for Apache 2 that makes decisions based on actual load";}i:2;i:1097;}i:34;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1178;}i:35;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1178;}i:36;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1178;}i:37;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1178;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" Create a system to automatically increase or decrease the number of servers hosting a website";}i:2;i:1182;}i:39;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1276;}i:40;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1276;}i:41;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:1276;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1276;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1277;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"Since these goals are not directly related, they were approached in series.";}i:2;i:1278;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1353;}i:46;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1355;}i:47;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:1009;i:1;i:1354;i:2;i:1;i:3;s:29:"Project Goals and Description";}i:2;i:1355;}i:48;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Apache 2 Load Balancer";i:1;i:2;i:2;i:1355;}i:2;i:1355;}i:49;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1355;}i:50;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1391;}i:51;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:1355;i:1;i:1390;i:2;i:2;i:3;s:22:"Apache 2 Load Balancer";}i:2;i:1391;}i:52;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Introduction";i:1;i:3;i:2;i:1391;}i:2;i:1391;}i:53;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1391;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1413;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Some inspiration for this project came from ";}i:2;i:1414;}i:56;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:37:"http://www.backhand.org/mod_backhand/";i:1;s:12:"mod_backhand";}i:2;i:1458;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:", a project started by Theo Schlossnagle in this class several years ago.  However, implementation differs greatly from mod_backhand.  Firstly, because of the availability of ";}i:2;i:1512;}i:58;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html";i:1;s:18:"mod_proxy_balancer";}i:2;i:1687;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" since Apache 2.1, I did not write a standalone load balancer.  Instead, I modified mod_proxy_balancer to include the balancing method ";}i:2;i:1770;}i:60;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1905;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"bycost";}i:2;i:1906;}i:62;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1912;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:".  The ";}i:2;i:1913;}i:64;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1920;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"bycost";}i:2;i:1921;}i:66;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1927;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:" method uses the results of an exponential function which produces a unitless score of resource usage based on CPU and RAM metrics.  This approach is adapted from R. Sean Borgstrom";}i:2;i:1928;}i:68;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:2108;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"s Ph.D. thesis, ";}i:2;i:2109;}i:70;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://www.dsn.jhu.edu/~yairamir/RSean_thesis.pdf";i:1;s:72:"A Cost-Benefit Approach to Resource Allocation in Scalable Metacomputers";}i:2;i:2125;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:".  Information about system resources, used in calculating the resource usage score for each server in the cluster, is gathered and communicated via a daemon running on each machine.  ";}i:2;i:2251;}i:72;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2435;}i:73;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2437;}i:74;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:1391;i:1;i:2436;i:2;i:3;i:3;s:12:"Introduction";}i:2;i:2437;}i:75;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"The Daemon";i:1;i:3;i:2;i:2437;}i:2;i:2437;}i:76;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2437;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2457;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"The daemon runs independent of Apache, gathering information about resource usage of the machine it is running on and distributing this information to the cluster.  Information comes from the Linux-specific pseudofiles ";}i:2;i:2458;}i:79;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:2677;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"/proc/stat";}i:2;i:2679;}i:81;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:2689;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:2691;}i:83;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:2696;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"/proc/meminfo";}i:2;i:2698;}i:85;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:2711;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:".  Values are converted from raw form in the pseudofiles into percentages giving the total usage.  This data is then multicast to the cluster through the ";}i:2;i:2713;}i:87;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:18:"http://spread.org/";i:1;s:14:"Spread Toolkit";}i:2;i:2867;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:312:".  Default settings have this process occuring once every second, providing the cluster with an up to date snapshot of the load on all machines.  Data received in the multicast group is placed into a shared memory segment where it can be read by Apache.  Thread safety is ensured through the use of semaphores.  ";}i:2;i:2904;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3216;}i:90;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3218;}i:91;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:2437;i:1;i:3217;i:2;i:3;i:3;s:10:"The Daemon";}i:2;i:3218;}i:92;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"The Load Distribution Algorithm";i:1;i:3;i:2;i:3218;}i:2;i:3218;}i:93;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3218;}i:94;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3259;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Every ";}i:2;i:3260;}i:96;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:3266;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"n";}i:2;i:3268;}i:98;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:3269;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" updates (default setting is ";}i:2;i:3271;}i:100;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:3300;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"n=1";}i:2;i:3302;}i:102;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:3305;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"), the daemon evaluates the entire set of data and produces a normalized ";}i:2;i:3307;}i:104;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:3380;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"work quota";}i:2;i:3381;}i:106;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:3391;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:330:", which determines how requests will be distributed across the cluster.  For example, if server 1 has a load score of 4, and server 2 has a load score of 2, the work quota will direct twice as much traffic to server 2 as server 1.  This approach, rather than directing all requests to the server with the least load, ensures that ";}i:2;i:3392;}i:108;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:3722;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"burstiness";}i:2;i:3723;}i:110;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:3733;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" of requests is kept to a minimum, and load stays fairly normalized across the cluster.";}i:2;i:3734;}i:112;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3821;}i:113;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3823;}i:114;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:3218;i:1;i:3822;i:2;i:3;i:3;s:31:"The Load Distribution Algorithm";}i:2;i:3823;}i:115;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"mod_proxy_balancer Modifications";i:1;i:3;i:2;i:3823;}i:2;i:3823;}i:116;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3823;}i:117;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3865;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"I implemeneted the custom ";}i:2;i:3866;}i:119;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:3892;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"lbmethod";}i:2;i:3894;}i:121;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:3902;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"  ";}i:2;i:3904;}i:123;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:3906;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"bycost";}i:2;i:3908;}i:125;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:3914;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:", which reads the work quota values from shared memory, and applies them to the existing load distribution algorithm used by the ";}i:2;i:3916;}i:127;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:4045;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"byrequests";}i:2;i:4047;}i:129;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:4057;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" load balancing method, ";}i:2;i:4059;}i:131;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:69:"http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html#requests";i:1;s:14:"described here";}i:2;i:4083;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:4171;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4172;}i:134;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4174;}i:135;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:3823;i:1;i:4173;i:2;i:3;i:3;s:32:"mod_proxy_balancer Modifications";}i:2;i:4174;}i:136;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Status";i:1;i:3;i:2;i:4174;}i:2;i:4174;}i:137;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4174;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4190;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"I have implemented this load balancer and have tested it to work, distributing requests as expected based on server load.  Stress testing has been done with ";}i:2;i:4191;}i:140;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://httpd.apache.org/docs/2.2/programs/ab.html";i:1;s:26:"Apache's benchmarking tool";}i:2;i:4348;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:241:", and the results are stable.  However, no real performance benchmarks have been completed, and more evaluation and optimization is necessary to make the existing proof-of-concept into a tool ready for deployment in a production environment.";}i:2;i:4428;}i:142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4669;}i:143;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4671;}i:144;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:4174;i:1;i:4670;i:2;i:3;i:3;s:6:"Status";}i:2;i:4671;}i:145;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Dynamic Instantiation Daemon";i:1;i:2;i:2;i:4671;}i:2;i:4671;}i:146;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4671;}i:147;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4713;}i:148;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:4671;i:1;i:4712;i:2;i:2;i:3;s:28:"Dynamic Instantiation Daemon";}i:2;i:4713;}i:149;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Overview";i:1;i:3;i:2;i:4713;}i:2;i:4713;}i:150;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4713;}i:151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4731;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1350:"This half of the project deals with the task of optimally distributing websites across a cluster of servers in a shared hosting environment.  This differs from most clustered web hosting environments in the number of websites hosted.  This is not to be confused with the application of clustering to serving a large website which requires more resources than can fit in a single machine.  In this situation, resources are said to be statically allocated - adding more processing power involves adding more hardware, and manually adding the new machine to the cluster.  Since all these machines are dedicated to serving one large website, the website exists on all servers at all times.  Dynamic instantiation is meant for the situation where you have many servers, and are hosting many more websites.  Due to disk space limitations and other overhead, it is not economical to serve all websites from all machines.  But advantages in reliability and scalability lie in hosting websites on more than 1 machine.  It is possible to manually create small sub-clusters delegated to serving a subset of all websites, but this does not achieve optimal distribution of websites based on resource requirements.  This is where dynamic instantiation comes in:  with my system, the entire cluster decides autonomously which machines should serve which websites.  ";}i:2;i:4732;}i:153;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6082;}i:154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6082;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:844:"For example, a low-traffic website, site1.com could be hosted from server 1 and server 2 for reliability, while two large traffic websites could be hosted by servers 2, 3, 5, and 7, and 3, 4, and 5, respectively, and thousands of other low to medium traffic websites are distributed across servers 1-8, with each website appearing on 2 servers minimum for reliability.  Say, one day, site1.com completes a major renovation of its website, and gains sudden popularity by links to it appearing on Slashdot, digg, and reddit simultaneously.  This sudden influx of traffic would overwhelm normal servers, taking down site1.com along with all other websites hosted on the same machine.  However, under my system, the daemon recognizes the need for additional resources for site1.com, and (dynamically) instantiates it on servers 3-8.  Now, site1.com";}i:2;i:6084;}i:156;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:6928;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"s load is distributed across all available servers, ensuring constant uptime and minimum slowdown for the entire cluster.  After the ";}i:2;i:6929;}i:158;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7062;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"slashdotting";}i:2;i:7063;}i:160;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7075;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:445:" has subsided, the system decides that due to the reduced traffic, the overhead associated with keeping site1.com on all 8 servers is not economical, so it removes it from servers 1, 2, 3, and 5.  In this way, the cluster has managed itself, dynamically expanding and contracting capacity when needed.  The ability to both expand and contract gives the ability for migration, so the cluster keeps all websites optimally distributed across nodes.";}i:2;i:7076;}i:162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7521;}i:163;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7523;}i:164;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:4713;i:1;i:7522;i:2;i:3;i:3;s:8:"Overview";}i:2;i:7523;}i:165;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Status";i:1;i:3;i:2;i:7523;}i:2;i:7523;}i:166;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7523;}i:167;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7539;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:187:"Due to time constraints, the algorithm to decide where and when to expand and contract has not been implemented.  More information about the proposed algorithm can be found in the paper, ";}i:2;i:7540;}i:169;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:95:"http://commedia.cnds.jhu.edu/courses/cs667-2007/dlb/papers/Base Decision Algorithm Overview.doc";i:1;s:32:"Base Decision Algorithm Overview";}i:2;i:7727;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:".  Although the decision algorithm does not yet exist, the mechanism for expanding and contracting websites does exist in proof-of-concept form, activated by manually typing a command.";}i:2;i:7859;}i:171;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8043;}i:172;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8045;}i:173;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:7523;i:1;i:8044;i:2;i:3;i:3;s:6:"Status";}i:2;i:8045;}i:174;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Resources";i:1;i:1;i:2;i:8045;}i:2;i:8045;}i:175;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:8045;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8068;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8069;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"I wrote these two papers during the course:";}i:2;i:8070;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8113;}i:180;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8114;}i:181;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8114;}i:182;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8114;}i:183;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8114;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8118;}i:185;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:80:"http://www.cnds.jhu.edu/courses/cs667-2007/dlb/papers/Project Proposal-final.doc";i:1;s:16:"Project Proposal";}i:2;i:8119;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8220;}i:187;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8221;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"(February 12, 2007)";}i:2;i:8223;}i:189;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:8242;}i:190;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8244;}i:191;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8244;}i:192;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8244;}i:193;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8245;}i:194;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8245;}i:195;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8245;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8249;}i:197;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:90:"http://www.cnds.jhu.edu/courses/cs667-2007/dlb/papers/Base Decision Algorithm Overview.doc";i:1;s:32:"Base Decision Algorithm Overview";}i:2;i:8250;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8377;}i:199;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8378;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"(March 5, 2007)";}i:2;i:8380;}i:201;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:8395;}i:202;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8397;}i:203;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8397;}i:204;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8397;}i:205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8397;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8398;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"I gave a presentation using the following OpenOffice Impress presentation at the end of the course, summing up the work I did throughout the semester:";}i:2;i:8399;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8549;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8550;}i:210;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8550;}i:211;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8550;}i:212;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8550;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8554;}i:214;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://www.cnds.jhu.edu/courses/cs667-2007/dlb/papers/dlb.odp";i:1;s:40:"Dynamic Load Balancing and Instantiation";}i:2;i:8555;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8661;}i:216;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8662;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"(April 25, 2007)";}i:2;i:8664;}i:218;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:8680;}i:219;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8682;}i:220;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8682;}i:221;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8682;}i:222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8682;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8683;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"Concepts from this thesis were used in the development of my project:";}i:2;i:8684;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8753;}i:226;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8754;}i:227;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:8754;}i:228;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8754;}i:229;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8754;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8758;}i:231;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:49:"http://www.dsn.jhu.edu/~yairamir/RSean_thesis.pdf";i:1;s:72:"A Cost-Benefit Approach to Resource Allocation in Scalable Metacomputers";}i:2;i:8759;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8885;}i:233;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:8886;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"(Ph.D. thesis by R. Sean Borgstrom, 2000)";}i:2;i:8888;}i:235;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:8929;}i:236;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8931;}i:237;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8931;}i:238;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:8931;}i:239;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8932;}i:240;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:8045;i:1;i:0;i:2;i:1;i:3;s:9:"Resources";}i:2;i:8932;}i:241;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:8932;}}